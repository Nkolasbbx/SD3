// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: comunicacion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComunicacionService_QueuePlayer_FullMethodName            = "/comunicacion.ComunicacionService/QueuePlayer"
	ComunicacionService_GetPlayerStatus_FullMethodName        = "/comunicacion.ComunicacionService/GetPlayerStatus"
	ComunicacionService_AssignMatch_FullMethodName            = "/comunicacion.ComunicacionService/AssignMatch"
	ComunicacionService_UpdateServerStatus_FullMethodName     = "/comunicacion.ComunicacionService/UpdateServerStatus"
	ComunicacionService_AdminGetSystemStatus_FullMethodName   = "/comunicacion.ComunicacionService/AdminGetSystemStatus"
	ComunicacionService_AdminUpdateServerState_FullMethodName = "/comunicacion.ComunicacionService/AdminUpdateServerState"
	ComunicacionService_PingServer_FullMethodName             = "/comunicacion.ComunicacionService/PingServer"
)

// ComunicacionServiceClient is the client API for ComunicacionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComunicacionServiceClient interface {
	// funcionalidad para solicitar unirse a la cola
	QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error)
	// funcionalidad para consultar el estado actual del jugador
	GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error)
	// funcionalidad de matchmaker para iniciar una partida
	AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error)
	// funcionalidad para informar cambios de estado del servidor
	UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error)
	// funcionalidad para el Cliente Administrador. Devuelve el estado de todos los servidores y las colas de jugadores
	AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	// funcionalidad  Para el Cliente Administrador, para forzar el estado de un servidor (ej. marcar como DISPONIBLE o CAIDO).
	AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error)
	// funcionalidad para verificar la salud de un servidor si no hay actualizaciones de estado recientes.
	PingServer(ctx context.Context, in *ServerId, opts ...grpc.CallOption) (*PingResponse, error)
}

type comunicacionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacionServiceClient(cc grpc.ClientConnInterface) ComunicacionServiceClient {
	return &comunicacionServiceClient{cc}
}

func (c *comunicacionServiceClient) QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuePlayerResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_QueuePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatusResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_GetPlayerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignMatchResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_AssignMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStatusUpdateResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_UpdateServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_AdminGetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUpdateResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_AdminUpdateServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) PingServer(ctx context.Context, in *ServerId, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_PingServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComunicacionServiceServer is the server API for ComunicacionService service.
// All implementations must embed UnimplementedComunicacionServiceServer
// for forward compatibility.
type ComunicacionServiceServer interface {
	// funcionalidad para solicitar unirse a la cola
	QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error)
	// funcionalidad para consultar el estado actual del jugador
	GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error)
	// funcionalidad de matchmaker para iniciar una partida
	AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error)
	// funcionalidad para informar cambios de estado del servidor
	UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error)
	// funcionalidad para el Cliente Administrador. Devuelve el estado de todos los servidores y las colas de jugadores
	AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error)
	// funcionalidad  Para el Cliente Administrador, para forzar el estado de un servidor (ej. marcar como DISPONIBLE o CAIDO).
	AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error)
	// funcionalidad para verificar la salud de un servidor si no hay actualizaciones de estado recientes.
	PingServer(context.Context, *ServerId) (*PingResponse, error)
	mustEmbedUnimplementedComunicacionServiceServer()
}

// UnimplementedComunicacionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComunicacionServiceServer struct{}

func (UnimplementedComunicacionServiceServer) QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePlayer not implemented")
}
func (UnimplementedComunicacionServiceServer) GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatus not implemented")
}
func (UnimplementedComunicacionServiceServer) AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMatch not implemented")
}
func (UnimplementedComunicacionServiceServer) UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerStatus not implemented")
}
func (UnimplementedComunicacionServiceServer) AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSystemStatus not implemented")
}
func (UnimplementedComunicacionServiceServer) AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateServerState not implemented")
}
func (UnimplementedComunicacionServiceServer) PingServer(context.Context, *ServerId) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedComunicacionServiceServer) mustEmbedUnimplementedComunicacionServiceServer() {}
func (UnimplementedComunicacionServiceServer) testEmbeddedByValue()                             {}

// UnsafeComunicacionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComunicacionServiceServer will
// result in compilation errors.
type UnsafeComunicacionServiceServer interface {
	mustEmbedUnimplementedComunicacionServiceServer()
}

func RegisterComunicacionServiceServer(s grpc.ServiceRegistrar, srv ComunicacionServiceServer) {
	// If the following call pancis, it indicates UnimplementedComunicacionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComunicacionService_ServiceDesc, srv)
}

func _ComunicacionService_QueuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).QueuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_QueuePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).QueuePlayer(ctx, req.(*PlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_GetPlayerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).GetPlayerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_GetPlayerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).GetPlayerStatus(ctx, req.(*PlayerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_AssignMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).AssignMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_AssignMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).AssignMatch(ctx, req.(*AssignMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_UpdateServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).UpdateServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_UpdateServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).UpdateServerStatus(ctx, req.(*ServerStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_AdminGetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).AdminGetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_AdminGetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).AdminGetSystemStatus(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_AdminUpdateServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).AdminUpdateServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_AdminUpdateServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).AdminUpdateServerState(ctx, req.(*AdminServerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_PingServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).PingServer(ctx, req.(*ServerId))
	}
	return interceptor(ctx, in, info, handler)
}

// ComunicacionService_ServiceDesc is the grpc.ServiceDesc for ComunicacionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComunicacionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comunicacion.ComunicacionService",
	HandlerType: (*ComunicacionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueuePlayer",
			Handler:    _ComunicacionService_QueuePlayer_Handler,
		},
		{
			MethodName: "GetPlayerStatus",
			Handler:    _ComunicacionService_GetPlayerStatus_Handler,
		},
		{
			MethodName: "AssignMatch",
			Handler:    _ComunicacionService_AssignMatch_Handler,
		},
		{
			MethodName: "UpdateServerStatus",
			Handler:    _ComunicacionService_UpdateServerStatus_Handler,
		},
		{
			MethodName: "AdminGetSystemStatus",
			Handler:    _ComunicacionService_AdminGetSystemStatus_Handler,
		},
		{
			MethodName: "AdminUpdateServerState",
			Handler:    _ComunicacionService_AdminUpdateServerState_Handler,
		},
		{
			MethodName: "PingServer",
			Handler:    _ComunicacionService_PingServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comunicacion.proto",
}
