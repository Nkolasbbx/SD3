// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: comunicacion.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mensajes para la funcionalidad de cola de jugadores
type PlayerInfoRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PlayerId           int32                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                                // ID del jugador que solicita unirse a la cola
	GameModePreference string                 `protobuf:"bytes,2,opt,name=game_mode_preference,json=gameModePreference,proto3" json:"game_mode_preference,omitempty"` // Preferencia de modo de juego del jugador
	VectorClock        *VectorClock           `protobuf:"bytes,3,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerInfoRequest) Reset() {
	*x = PlayerInfoRequest{}
	mi := &file_comunicacion_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoRequest) ProtoMessage() {}

func (x *PlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*PlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInfoRequest) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerInfoRequest) GetGameModePreference() string {
	if x != nil {
		return x.GameModePreference
	}
	return ""
}

func (x *PlayerInfoRequest) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type QueuePlayerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                            // Mensaje adicional, por ejemplo, si el jugador ya está en la cola
	VectorClock   *VectorClock           `protobuf:"bytes,2,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // Vector de reloj para la sincronización
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueuePlayerResponse) Reset() {
	*x = QueuePlayerResponse{}
	mi := &file_comunicacion_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerResponse) ProtoMessage() {}

func (x *QueuePlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerResponse.ProtoReflect.Descriptor instead.
func (*QueuePlayerResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{1}
}

func (x *QueuePlayerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueuePlayerResponse) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Mensajes para la funcionalidad de consulta del estado del jugador
type PlayerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int32                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // ID del jugador para consultar su estado
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusRequest) Reset() {
	*x = PlayerStatusRequest{}
	mi := &file_comunicacion_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRequest) ProtoMessage() {}

func (x *PlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerStatusRequest) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

type PlayerStatusResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Status             string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                                     // Estado del jugador, por ejemplo, "IDLE", "IN QUEUE", "IN MATCH"
	MatchId            int32                  `protobuf:"varint,4,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                   // ID de la partida, si está en una
	MatchServerAddress string                 `protobuf:"bytes,5,opt,name=match_server_address,json=matchServerAddress,proto3" json:"match_server_address,omitempty"` // Dirección del servidor de la partida, si está en una
	VectorClock        *VectorClock           `protobuf:"bytes,6,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`                        // Vector de reloj para la sincronización
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlayerStatusResponse) Reset() {
	*x = PlayerStatusResponse{}
	mi := &file_comunicacion_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusResponse) ProtoMessage() {}

func (x *PlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PlayerStatusResponse) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *PlayerStatusResponse) GetMatchServerAddress() string {
	if x != nil {
		return x.MatchServerAddress
	}
	return ""
}

func (x *PlayerStatusResponse) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Mensajes para la funcionalidad de asignación de partidas
type AssignMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                 // ID del jugador que solicita una partida
	PlayersIds    []int32                `protobuf:"varint,2,rep,packed,name=players_ids,json=playersIds,proto3" json:"players_ids,omitempty"` // IDs de los jugadores asignados a la partida
	VectorClock   *VectorClock           `protobuf:"bytes,3,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`      // Vector de reloj para la sincronización
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignMatchRequest) Reset() {
	*x = AssignMatchRequest{}
	mi := &file_comunicacion_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchRequest) ProtoMessage() {}

func (x *AssignMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchRequest.ProtoReflect.Descriptor instead.
func (*AssignMatchRequest) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{4}
}

func (x *AssignMatchRequest) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *AssignMatchRequest) GetPlayersIds() []int32 {
	if x != nil {
		return x.PlayersIds
	}
	return nil
}

func (x *AssignMatchRequest) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type AssignMatchResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Message            string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`                                                   // Mensaje adicional, por ejemplo, si la partida fue asignada correctamente
	MatchId            int32                  `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                                   // ID de la partida asignada
	PlayersIds         []int32                `protobuf:"varint,3,rep,packed,name=players_ids,json=playersIds,proto3" json:"players_ids,omitempty"`                   // IDs de los jugadores asignados a la partida
	MatchServerAddress string                 `protobuf:"bytes,4,opt,name=match_server_address,json=matchServerAddress,proto3" json:"match_server_address,omitempty"` // Dirección del servidor de la partida asignada
	VectorClock        *VectorClock           `protobuf:"bytes,5,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"`                        // Vector de reloj para la sincronización
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AssignMatchResponse) Reset() {
	*x = AssignMatchResponse{}
	mi := &file_comunicacion_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchResponse) ProtoMessage() {}

func (x *AssignMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchResponse.ProtoReflect.Descriptor instead.
func (*AssignMatchResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{5}
}

func (x *AssignMatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AssignMatchResponse) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *AssignMatchResponse) GetPlayersIds() []int32 {
	if x != nil {
		return x.PlayersIds
	}
	return nil
}

func (x *AssignMatchResponse) GetMatchServerAddress() string {
	if x != nil {
		return x.MatchServerAddress
	}
	return ""
}

func (x *AssignMatchResponse) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Mensajes para la funcionalidad de actualización del estado del servidor
type ServerStatusUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`          // Dirección del servidor que está enviando la actualización
	NewStatus     string                 `protobuf:"bytes,2,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`       // Estado del servidor, por ejemplo, "ONLINE", "OFFLINE", "MAINTENANCE"
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                            // Dirección del servidor, por ejemplo
	VectorClock   *VectorClock           `protobuf:"bytes,4,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // Vector de reloj para la sincronización
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateRequest) Reset() {
	*x = ServerStatusUpdateRequest{}
	mi := &file_comunicacion_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateRequest) ProtoMessage() {}

func (x *ServerStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{6}
}

func (x *ServerStatusUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

type ServerStatusUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    string                 `protobuf:"bytes,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`    // Código de estado de la actualización, por ejemplo, "SUCCESS", "FAILURE"
	VectorClock   *VectorClock           `protobuf:"bytes,2,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // Vector de reloj para la sincronización
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateResponse) Reset() {
	*x = ServerStatusUpdateResponse{}
	mi := &file_comunicacion_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateResponse) ProtoMessage() {}

func (x *ServerStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{7}
}

func (x *ServerStatusUpdateResponse) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *ServerStatusUpdateResponse) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Mensajes para la funcionalidad del Cliente Administrador
type AdminRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AdminId       string                 `protobuf:"bytes,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"` // ID del administrador que solicita el estado del sistema
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminRequest) Reset() {
	*x = AdminRequest{}
	mi := &file_comunicacion_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRequest) ProtoMessage() {}

func (x *AdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRequest.ProtoReflect.Descriptor instead.
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{8}
}

func (x *AdminRequest) GetAdminId() string {
	if x != nil {
		return x.AdminId
	}
	return ""
}

type ServerState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // ID o dirección del servidor
	Status         string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                          // Estado del servidor, por ejemplo, "ONLINE", "OFFLINE"
	Address        string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`                                        // Dirección del servidor
	CurrentMatchId int32                  `protobuf:"varint,4,opt,name=current_match_id,json=currentMatchId,proto3" json:"current_match_id,omitempty"` // ID de la partida actual, si aplica
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServerState) Reset() {
	*x = ServerState{}
	mi := &file_comunicacion_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerState) ProtoMessage() {}

func (x *ServerState) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerState.ProtoReflect.Descriptor instead.
func (*ServerState) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{9}
}

func (x *ServerState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServerState) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerState) GetCurrentMatchId() int32 {
	if x != nil {
		return x.CurrentMatchId
	}
	return 0
}

type PlayerQueueEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int32                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`           // ID del jugador en la cola
	TimeInQueue   string                 `protobuf:"bytes,2,opt,name=time_in_queue,json=timeInQueue,proto3" json:"time_in_queue,omitempty"` // Tiempo en cola (puede ser string o int64 para segundos)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerQueueEntry) Reset() {
	*x = PlayerQueueEntry{}
	mi := &file_comunicacion_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueueEntry) ProtoMessage() {}

func (x *PlayerQueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueueEntry.ProtoReflect.Descriptor instead.
func (*PlayerQueueEntry) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerQueueEntry) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerQueueEntry) GetTimeInQueue() string {
	if x != nil {
		return x.TimeInQueue
	}
	return ""
}

// ∗ SystemStatusResponse: Debe contener listas de ServerState (id, status, address, current match id) y PlayerQueueEntry (player id, time in queue).
type SystemStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*ServerState         `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`                            // Lista de estados de los servidores
	PlayerQueue   []*PlayerQueueEntry    `protobuf:"bytes,2,rep,name=player_queue,json=playerQueue,proto3" json:"player_queue,omitempty"` // Lista de jugadores en cola
	VectorClock   *VectorClock           `protobuf:"bytes,3,opt,name=vector_clock,json=vectorClock,proto3" json:"vector_clock,omitempty"` // Vector de reloj para la sincronización
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemStatusResponse) Reset() {
	*x = SystemStatusResponse{}
	mi := &file_comunicacion_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse) ProtoMessage() {}

func (x *SystemStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{11}
}

func (x *SystemStatusResponse) GetServers() []*ServerState {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *SystemStatusResponse) GetPlayerQueue() []*PlayerQueueEntry {
	if x != nil {
		return x.PlayerQueue
	}
	return nil
}

func (x *SystemStatusResponse) GetVectorClock() *VectorClock {
	if x != nil {
		return x.VectorClock
	}
	return nil
}

// Mensajes para la actualización del estado del servidor por parte del Cliente Administrador
type AdminServerUpdateRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ServerId        string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`                        // ID del servidor a actualizar
	NewForcedStatus string                 `protobuf:"bytes,2,opt,name=new_forced_status,json=newForcedStatus,proto3" json:"new_forced_status,omitempty"` // Nuevo estado del servidor, por ejemplo, "DISPONIBLE", "CAIDO"
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdminServerUpdateRequest) Reset() {
	*x = AdminServerUpdateRequest{}
	mi := &file_comunicacion_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminServerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServerUpdateRequest) ProtoMessage() {}

func (x *AdminServerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServerUpdateRequest.ProtoReflect.Descriptor instead.
func (*AdminServerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{12}
}

func (x *AdminServerUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AdminServerUpdateRequest) GetNewForcedStatus() string {
	if x != nil {
		return x.NewForcedStatus
	}
	return ""
}

type AdminUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusCode    string                 `protobuf:"bytes,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"` // Código de estado de la actualización, por ejemplo, "SUCCESS", "FAILURE"
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                         // Mensaje adicional, por ejemplo, "Servidor actualizado correctamente"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateResponse) Reset() {
	*x = AdminUpdateResponse{}
	mi := &file_comunicacion_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateResponse) ProtoMessage() {}

func (x *AdminUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{13}
}

func (x *AdminUpdateResponse) GetStatusCode() string {
	if x != nil {
		return x.StatusCode
	}
	return ""
}

func (x *AdminUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Mensajes para la verificación de salud del servidor
type ServerId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"` // ID o dirección del servidor a verificar
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerId) Reset() {
	*x = ServerId{}
	mi := &file_comunicacion_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerId) ProtoMessage() {}

func (x *ServerId) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerId.ProtoReflect.Descriptor instead.
func (*ServerId) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{14}
}

func (x *ServerId) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`   // Estado del servidor, por ejemplo, "ONLINE", "OFFLINE"
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Mensaje adicional, por ejemplo, "Servidor activo"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_comunicacion_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{15}
}

func (x *PingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VectorClock struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clocks        map[string]int32       `protobuf:"bytes,1,rep,name=clocks,proto3" json:"clocks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Ej: {"Player1": 1, "Matchmaker": 3, "GameServer1": 2}
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorClock) Reset() {
	*x = VectorClock{}
	mi := &file_comunicacion_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorClock) ProtoMessage() {}

func (x *VectorClock) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorClock.ProtoReflect.Descriptor instead.
func (*VectorClock) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{16}
}

func (x *VectorClock) GetClocks() map[string]int32 {
	if x != nil {
		return x.Clocks
	}
	return nil
}

// jugador
type Jugador struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                            // ID del jugador
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                         // Nombre del jugador
	GameModePreference string                 `protobuf:"bytes,3,opt,name=game_mode_preference,json=gameModePreference,proto3" json:"game_mode_preference,omitempty"` // Preferencia de modo de juego del jugador
	Status             string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                     // Estado del jugador, por ejemplo, "IDLE", "IN QUEUE", "IN MATCH"
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Jugador) Reset() {
	*x = Jugador{}
	mi := &file_comunicacion_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jugador) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jugador) ProtoMessage() {}

func (x *Jugador) ProtoReflect() protoreflect.Message {
	mi := &file_comunicacion_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jugador.ProtoReflect.Descriptor instead.
func (*Jugador) Descriptor() ([]byte, []int) {
	return file_comunicacion_proto_rawDescGZIP(), []int{17}
}

func (x *Jugador) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Jugador) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Jugador) GetGameModePreference() string {
	if x != nil {
		return x.GameModePreference
	}
	return ""
}

func (x *Jugador) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_comunicacion_proto protoreflect.FileDescriptor

const file_comunicacion_proto_rawDesc = "" +
	"\n" +
	"\x12comunicacion.proto\x12\fcomunicacion\"\xa0\x01\n" +
	"\x11PlayerInfoRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x05R\bplayerId\x120\n" +
	"\x14game_mode_preference\x18\x02 \x01(\tR\x12gameModePreference\x12<\n" +
	"\fvector_clock\x18\x03 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"m\n" +
	"\x13QueuePlayerResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12<\n" +
	"\fvector_clock\x18\x02 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"2\n" +
	"\x13PlayerStatusRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x05R\bplayerId\"\xb9\x01\n" +
	"\x14PlayerStatusResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x19\n" +
	"\bmatch_id\x18\x04 \x01(\x05R\amatchId\x120\n" +
	"\x14match_server_address\x18\x05 \x01(\tR\x12matchServerAddress\x12<\n" +
	"\fvector_clock\x18\x06 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"\x8e\x01\n" +
	"\x12AssignMatchRequest\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\x05R\amatchId\x12\x1f\n" +
	"\vplayers_ids\x18\x02 \x03(\x05R\n" +
	"playersIds\x12<\n" +
	"\fvector_clock\x18\x03 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"\xdb\x01\n" +
	"\x13AssignMatchResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\x05R\amatchId\x12\x1f\n" +
	"\vplayers_ids\x18\x03 \x03(\x05R\n" +
	"playersIds\x120\n" +
	"\x14match_server_address\x18\x04 \x01(\tR\x12matchServerAddress\x12<\n" +
	"\fvector_clock\x18\x05 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"\xaf\x01\n" +
	"\x19ServerStatusUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12\x1d\n" +
	"\n" +
	"new_status\x18\x02 \x01(\tR\tnewStatus\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12<\n" +
	"\fvector_clock\x18\x04 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"{\n" +
	"\x1aServerStatusUpdateResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\tR\n" +
	"statusCode\x12<\n" +
	"\fvector_clock\x18\x02 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\")\n" +
	"\fAdminRequest\x12\x19\n" +
	"\badmin_id\x18\x01 \x01(\tR\aadminId\"y\n" +
	"\vServerState\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12(\n" +
	"\x10current_match_id\x18\x04 \x01(\x05R\x0ecurrentMatchId\"S\n" +
	"\x10PlayerQueueEntry\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x05R\bplayerId\x12\"\n" +
	"\rtime_in_queue\x18\x02 \x01(\tR\vtimeInQueue\"\xcc\x01\n" +
	"\x14SystemStatusResponse\x123\n" +
	"\aservers\x18\x01 \x03(\v2\x19.comunicacion.ServerStateR\aservers\x12A\n" +
	"\fplayer_queue\x18\x02 \x03(\v2\x1e.comunicacion.PlayerQueueEntryR\vplayerQueue\x12<\n" +
	"\fvector_clock\x18\x03 \x01(\v2\x19.comunicacion.VectorClockR\vvectorClock\"c\n" +
	"\x18AdminServerUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12*\n" +
	"\x11new_forced_status\x18\x02 \x01(\tR\x0fnewForcedStatus\"P\n" +
	"\x13AdminUpdateResponse\x12\x1f\n" +
	"\vstatus_code\x18\x01 \x01(\tR\n" +
	"statusCode\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"'\n" +
	"\bServerId\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\"@\n" +
	"\fPingResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x87\x01\n" +
	"\vVectorClock\x12=\n" +
	"\x06clocks\x18\x01 \x03(\v2%.comunicacion.VectorClock.ClocksEntryR\x06clocks\x1a9\n" +
	"\vClocksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"w\n" +
	"\aJugador\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x120\n" +
	"\x14game_mode_preference\x18\x03 \x01(\tR\x12gameModePreference\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status2\xfe\x04\n" +
	"\x13ComunicacionService\x12Q\n" +
	"\vQueuePlayer\x12\x1f.comunicacion.PlayerInfoRequest\x1a!.comunicacion.QueuePlayerResponse\x12X\n" +
	"\x0fGetPlayerStatus\x12!.comunicacion.PlayerStatusRequest\x1a\".comunicacion.PlayerStatusResponse\x12R\n" +
	"\vAssignMatch\x12 .comunicacion.AssignMatchRequest\x1a!.comunicacion.AssignMatchResponse\x12g\n" +
	"\x12UpdateServerStatus\x12'.comunicacion.ServerStatusUpdateRequest\x1a(.comunicacion.ServerStatusUpdateResponse\x12V\n" +
	"\x14AdminGetSystemStatus\x12\x1a.comunicacion.AdminRequest\x1a\".comunicacion.SystemStatusResponse\x12c\n" +
	"\x16AdminUpdateServerState\x12&.comunicacion.AdminServerUpdateRequest\x1a!.comunicacion.AdminUpdateResponse\x12@\n" +
	"\n" +
	"PingServer\x12\x16.comunicacion.ServerId\x1a\x1a.comunicacion.PingResponseB\x13Z\x11grpc-server/protob\x06proto3"

var (
	file_comunicacion_proto_rawDescOnce sync.Once
	file_comunicacion_proto_rawDescData []byte
)

func file_comunicacion_proto_rawDescGZIP() []byte {
	file_comunicacion_proto_rawDescOnce.Do(func() {
		file_comunicacion_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_comunicacion_proto_rawDesc), len(file_comunicacion_proto_rawDesc)))
	})
	return file_comunicacion_proto_rawDescData
}

var file_comunicacion_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_comunicacion_proto_goTypes = []any{
	(*PlayerInfoRequest)(nil),          // 0: comunicacion.PlayerInfoRequest
	(*QueuePlayerResponse)(nil),        // 1: comunicacion.QueuePlayerResponse
	(*PlayerStatusRequest)(nil),        // 2: comunicacion.PlayerStatusRequest
	(*PlayerStatusResponse)(nil),       // 3: comunicacion.PlayerStatusResponse
	(*AssignMatchRequest)(nil),         // 4: comunicacion.AssignMatchRequest
	(*AssignMatchResponse)(nil),        // 5: comunicacion.AssignMatchResponse
	(*ServerStatusUpdateRequest)(nil),  // 6: comunicacion.ServerStatusUpdateRequest
	(*ServerStatusUpdateResponse)(nil), // 7: comunicacion.ServerStatusUpdateResponse
	(*AdminRequest)(nil),               // 8: comunicacion.AdminRequest
	(*ServerState)(nil),                // 9: comunicacion.ServerState
	(*PlayerQueueEntry)(nil),           // 10: comunicacion.PlayerQueueEntry
	(*SystemStatusResponse)(nil),       // 11: comunicacion.SystemStatusResponse
	(*AdminServerUpdateRequest)(nil),   // 12: comunicacion.AdminServerUpdateRequest
	(*AdminUpdateResponse)(nil),        // 13: comunicacion.AdminUpdateResponse
	(*ServerId)(nil),                   // 14: comunicacion.ServerId
	(*PingResponse)(nil),               // 15: comunicacion.PingResponse
	(*VectorClock)(nil),                // 16: comunicacion.VectorClock
	(*Jugador)(nil),                    // 17: comunicacion.Jugador
	nil,                                // 18: comunicacion.VectorClock.ClocksEntry
}
var file_comunicacion_proto_depIdxs = []int32{
	16, // 0: comunicacion.PlayerInfoRequest.vector_clock:type_name -> comunicacion.VectorClock
	16, // 1: comunicacion.QueuePlayerResponse.vector_clock:type_name -> comunicacion.VectorClock
	16, // 2: comunicacion.PlayerStatusResponse.vector_clock:type_name -> comunicacion.VectorClock
	16, // 3: comunicacion.AssignMatchRequest.vector_clock:type_name -> comunicacion.VectorClock
	16, // 4: comunicacion.AssignMatchResponse.vector_clock:type_name -> comunicacion.VectorClock
	16, // 5: comunicacion.ServerStatusUpdateRequest.vector_clock:type_name -> comunicacion.VectorClock
	16, // 6: comunicacion.ServerStatusUpdateResponse.vector_clock:type_name -> comunicacion.VectorClock
	9,  // 7: comunicacion.SystemStatusResponse.servers:type_name -> comunicacion.ServerState
	10, // 8: comunicacion.SystemStatusResponse.player_queue:type_name -> comunicacion.PlayerQueueEntry
	16, // 9: comunicacion.SystemStatusResponse.vector_clock:type_name -> comunicacion.VectorClock
	18, // 10: comunicacion.VectorClock.clocks:type_name -> comunicacion.VectorClock.ClocksEntry
	0,  // 11: comunicacion.ComunicacionService.QueuePlayer:input_type -> comunicacion.PlayerInfoRequest
	2,  // 12: comunicacion.ComunicacionService.GetPlayerStatus:input_type -> comunicacion.PlayerStatusRequest
	4,  // 13: comunicacion.ComunicacionService.AssignMatch:input_type -> comunicacion.AssignMatchRequest
	6,  // 14: comunicacion.ComunicacionService.UpdateServerStatus:input_type -> comunicacion.ServerStatusUpdateRequest
	8,  // 15: comunicacion.ComunicacionService.AdminGetSystemStatus:input_type -> comunicacion.AdminRequest
	12, // 16: comunicacion.ComunicacionService.AdminUpdateServerState:input_type -> comunicacion.AdminServerUpdateRequest
	14, // 17: comunicacion.ComunicacionService.PingServer:input_type -> comunicacion.ServerId
	1,  // 18: comunicacion.ComunicacionService.QueuePlayer:output_type -> comunicacion.QueuePlayerResponse
	3,  // 19: comunicacion.ComunicacionService.GetPlayerStatus:output_type -> comunicacion.PlayerStatusResponse
	5,  // 20: comunicacion.ComunicacionService.AssignMatch:output_type -> comunicacion.AssignMatchResponse
	7,  // 21: comunicacion.ComunicacionService.UpdateServerStatus:output_type -> comunicacion.ServerStatusUpdateResponse
	11, // 22: comunicacion.ComunicacionService.AdminGetSystemStatus:output_type -> comunicacion.SystemStatusResponse
	13, // 23: comunicacion.ComunicacionService.AdminUpdateServerState:output_type -> comunicacion.AdminUpdateResponse
	15, // 24: comunicacion.ComunicacionService.PingServer:output_type -> comunicacion.PingResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_comunicacion_proto_init() }
func file_comunicacion_proto_init() {
	if File_comunicacion_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_comunicacion_proto_rawDesc), len(file_comunicacion_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comunicacion_proto_goTypes,
		DependencyIndexes: file_comunicacion_proto_depIdxs,
		MessageInfos:      file_comunicacion_proto_msgTypes,
	}.Build()
	File_comunicacion_proto = out.File
	file_comunicacion_proto_goTypes = nil
	file_comunicacion_proto_depIdxs = nil
}
