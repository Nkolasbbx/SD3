// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: comunicacion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComunicacionService_QueuePlayer_FullMethodName     = "/comunicacion.ComunicacionService/QueuePlayer"
	ComunicacionService_GetPlayerStatus_FullMethodName = "/comunicacion.ComunicacionService/GetPlayerStatus"
)

// ComunicacionServiceClient is the client API for ComunicacionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComunicacionServiceClient interface {
	// funcionalidad para solicitar unirse a la cola
	QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error)
	// funcionalidad para consultar el estado actual del jugador
	GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error)
}

type comunicacionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacionServiceClient(cc grpc.ClientConnInterface) ComunicacionServiceClient {
	return &comunicacionServiceClient{cc}
}

func (c *comunicacionServiceClient) QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuePlayerResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_QueuePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionServiceClient) GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatusResponse)
	err := c.cc.Invoke(ctx, ComunicacionService_GetPlayerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComunicacionServiceServer is the server API for ComunicacionService service.
// All implementations must embed UnimplementedComunicacionServiceServer
// for forward compatibility.
type ComunicacionServiceServer interface {
	// funcionalidad para solicitar unirse a la cola
	QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error)
	// funcionalidad para consultar el estado actual del jugador
	GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error)
	mustEmbedUnimplementedComunicacionServiceServer()
}

// UnimplementedComunicacionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComunicacionServiceServer struct{}

func (UnimplementedComunicacionServiceServer) QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePlayer not implemented")
}
func (UnimplementedComunicacionServiceServer) GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatus not implemented")
}
func (UnimplementedComunicacionServiceServer) mustEmbedUnimplementedComunicacionServiceServer() {}
func (UnimplementedComunicacionServiceServer) testEmbeddedByValue()                             {}

// UnsafeComunicacionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComunicacionServiceServer will
// result in compilation errors.
type UnsafeComunicacionServiceServer interface {
	mustEmbedUnimplementedComunicacionServiceServer()
}

func RegisterComunicacionServiceServer(s grpc.ServiceRegistrar, srv ComunicacionServiceServer) {
	// If the following call pancis, it indicates UnimplementedComunicacionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComunicacionService_ServiceDesc, srv)
}

func _ComunicacionService_QueuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).QueuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_QueuePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).QueuePlayer(ctx, req.(*PlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComunicacionService_GetPlayerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServiceServer).GetPlayerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComunicacionService_GetPlayerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServiceServer).GetPlayerStatus(ctx, req.(*PlayerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComunicacionService_ServiceDesc is the grpc.ServiceDesc for ComunicacionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComunicacionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comunicacion.ComunicacionService",
	HandlerType: (*ComunicacionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueuePlayer",
			Handler:    _ComunicacionService_QueuePlayer_Handler,
		},
		{
			MethodName: "GetPlayerStatus",
			Handler:    _ComunicacionService_GetPlayerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comunicacion.proto",
}
